// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./vendor/github.com/aws/aws-sdk-go/service/s3/s3manager/s3manageriface/interface.go

package storage

import (
	aws "github.com/aws/aws-sdk-go/aws"
	s3 "github.com/aws/aws-sdk-go/service/s3"
	s3manager "github.com/aws/aws-sdk-go/service/s3/s3manager"
	gomock "github.com/golang/mock/gomock"
	io "io"
)

// Mock of DownloaderAPI interface
type MockDownloaderAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockDownloaderAPIRecorder
}

// Recorder for MockDownloaderAPI (not exported)
type _MockDownloaderAPIRecorder struct {
	mock *MockDownloaderAPI
}

func NewMockDownloaderAPI(ctrl *gomock.Controller) *MockDownloaderAPI {
	mock := &MockDownloaderAPI{ctrl: ctrl}
	mock.recorder = &_MockDownloaderAPIRecorder{mock}
	return mock
}

func (_m *MockDownloaderAPI) EXPECT() *_MockDownloaderAPIRecorder {
	return _m.recorder
}

func (_m *MockDownloaderAPI) Download(_param0 io.WriterAt, _param1 *s3.GetObjectInput, _param2 ...func(*s3manager.Downloader)) (int64, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Download", _s...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDownloaderAPIRecorder) Download(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Download", _s...)
}

func (_m *MockDownloaderAPI) DownloadWithContext(_param0 aws.Context, _param1 io.WriterAt, _param2 *s3.GetObjectInput, _param3 ...func(*s3manager.Downloader)) (int64, error) {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DownloadWithContext", _s...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDownloaderAPIRecorder) DownloadWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DownloadWithContext", _s...)
}

// Mock of UploaderAPI interface
type MockUploaderAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockUploaderAPIRecorder
}

// Recorder for MockUploaderAPI (not exported)
type _MockUploaderAPIRecorder struct {
	mock *MockUploaderAPI
}

func NewMockUploaderAPI(ctrl *gomock.Controller) *MockUploaderAPI {
	mock := &MockUploaderAPI{ctrl: ctrl}
	mock.recorder = &_MockUploaderAPIRecorder{mock}
	return mock
}

func (_m *MockUploaderAPI) EXPECT() *_MockUploaderAPIRecorder {
	return _m.recorder
}

func (_m *MockUploaderAPI) Upload(_param0 *s3manager.UploadInput, _param1 ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Upload", _s...)
	ret0, _ := ret[0].(*s3manager.UploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUploaderAPIRecorder) Upload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Upload", _s...)
}

func (_m *MockUploaderAPI) UploadWithContext(_param0 aws.Context, _param1 *s3manager.UploadInput, _param2 ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UploadWithContext", _s...)
	ret0, _ := ret[0].(*s3manager.UploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUploaderAPIRecorder) UploadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UploadWithContext", _s...)
}
